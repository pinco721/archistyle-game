import { useState, useEffect } from "react";
// 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON-—Ñ–∞–π–ª—É –≤–µ—Ä–µ–Ω
import stylesData from './data/styles.json'; 

// 2. –û–±—ä—è–≤–ª—è–µ–º allStyles —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è stylesData
const allStyles = stylesData; 

// 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º allStyles –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è stylesMap
const stylesMap = allStyles.reduce((acc, style) => {
const allNames = [style.name.toLowerCase(), ...(style.aliases || [])]; // –í–∫–ª—é—á–∞–µ–º –∏–º—è –∏ –≤—Å–µ —Å–∏–Ω–æ–Ω–∏–º—ã

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–Ω–æ–Ω–∏–º/–∏–º—è –∫ –æ–¥–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É —Å—Ç–∏–ª—è
  allNames.forEach(name => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, —Ö–æ—Ç—è –≤—Ä—è–¥ –ª–∏ —Å—Ç–∏–ª–∏ –±—É–¥—É—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
    if (!acc[name]) { 
      acc[name] = style;
    }
  });

  return acc;
}, {});

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –∏–º–µ—Ç—å –∏ –∫–ª—é—á, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
const HINT_KEYS_MAP = {
    period: "–ü–µ—Ä–∏–æ–¥",
    region: "–†–µ–≥–∏–æ–Ω",
    form: "–§–æ—Ä–º–∞",
    materials: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    decor: "–î–µ–∫–æ—Ä",
    idea: "–ò–¥–µ—è",
};
const HINT_KEYS = Object.keys(HINT_KEYS_MAP); // ['period', 'region', ...]

const getRandomElement = (array) => {
  if (!array || array.length === 0) return null;
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
const formatLabel = (key) => {
  const map = {
    period: "–ü–µ—Ä–∏–æ–¥",
    region: "–†–µ–≥–∏–æ–Ω",
    form: "–§–æ—Ä–º–∞",
    materials: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    decor: "–î–µ–∫–æ—Ä",
    idea: "–ò–¥–µ—è",
  };
  return map[key] || key;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
const getRandomStyle = (styles) => {
  const randomIndex = Math.floor(Math.random() * styles.length);
  return styles[randomIndex];
};

export default function Game() {
  
  const [targetStyle, setTargetStyle] = useState(null); 
  const [guess, setGuess] = useState("");
  const [guessesHistory, setGuessesHistory] = useState([]); 
  const [gameState, setGameState] = useState('playing'); // 'playing' | 'won' | 'lost'
  const [isAnimating, setIsAnimating] = useState(false);
  const [error, setError] = useState(null);

  const colorMap = {
    correct: "bg-green-500 text-white",
    partial: "bg-yellow-400 text-white",
    wrong: "bg-gray-300 text-gray-700",
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –°–±—Ä–æ—Å –∏–≥—Ä—ã
  const startNewGame = () => {
      // 1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ì–æ—Ç–∏–∫–∞")
    const newTargetStyleObject = getRandomElement(allStyles); 
    if (!newTargetStyleObject) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–π –±–∞–∑—ã
      // 2. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è
    const randomPhotoUrl = getRandomElement(newTargetStyleObject.photoUrls);
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç, –æ–±—ä–µ–¥–∏–Ω—è—è —Å—Ç–∏–ª—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π URL
  // (–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤ targetStyle –≤—Å–µ–≥–¥–∞ –±—ã–ª photoUrl, –∞ –Ω–µ –º–∞—Å—Å–∏–≤)
    const finalTarget = {
      ...newTargetStyleObject,
      currentPhotoUrl: randomPhotoUrl // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π URL –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
    };

// 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTargetStyle(finalTarget);
    setGuessesHistory([]);
    setGuess('');
    setGameState('playing');
  };

  useEffect(() => {
    startNewGame(); 
  }, []); 
// ... –≤–Ω—É—Ç—Ä–∏ Game.jsx
// ...

// 2. –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
// 2. –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
const generateHints = (target, guessedStyle) => {
  
  // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (–º—ã —ç—Ç–æ –ø–æ–º–µ—Ç–∏–ª–∏ –≤ handleGuess)
  if (guessedStyle.isUnrecognized) { 
    return HINT_KEYS.map(key => ({
      key: key, 
      label: formatLabel(key),
      status: 'wrong' // –°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Å–µ—Ä—ã–µ
    }));
  }

    // –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–∞–π–¥–µ–Ω, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    return HINT_KEYS.map(key => {
        const targetValue = target[key].toLowerCase().trim();
        const guessValue = guessedStyle[key].toLowerCase().trim();
        
        let status = 'wrong'; 

        if (guessValue === targetValue) {
            // 1. –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            status = 'correct'; 
        } else if (key === 'period') {
            // 2. –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–ï–†–ò–û–î–ê (Period)
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–µ–∫–∞
            const targetCenturies = targetValue.match(/(\d{1,2})|(\d{4})/g) || [];
            const guessCenturies = guessValue.match(/(\d{1,2})|(\d{4})/g) || [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—â–∏–π –≤–µ–∫/–≥–æ–¥
            const hasCenturyOverlap = targetCenturies.some(century => 
                guessCenturies.includes(century)
            );

            if (hasCenturyOverlap) {
                status = 'partial';
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–µ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 'wrong'
                status = 'wrong';
            }
            
        } else if (targetValue.includes(guessValue) || guessValue.includes(targetValue)) {
            // 3. –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –ö–õ–Æ–ß–ï–ô (form, materials, etc.)
            status = 'partial';
        } else {
            // 4. –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            status = 'wrong';
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∏ –∫–ª—é—á
        return {
            key: key, 
            label: formatLabel(key), 
            status: status 
        };
    });
};

// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
const handleGuess = () => {
    // 0. –ó–∞—â–∏—Ç–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if (isAnimating || !guess.trim() || gameState !== 'playing' || !targetStyle) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
    setError(null);
    
    const userGuessText = guess.trim();
    const userGuessTextLower = userGuessText.toLowerCase();

    // 1. –ü–æ–∏—Å–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –≤ –±–∞–∑–µ (–ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–∏–Ω–æ–Ω–∏–º—É)
    let guessedStyle = stylesMap[userGuessTextLower]; 
    
    // üõë –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–ö–ê –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –°–¢–ò–õ–Ø –í –ë–ê–ó–ï
    // –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ stylesMap, —ç—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å
    if (!guessedStyle) {
        setError(`–°—Ç–∏–ª—å "${userGuessText}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–µ–µ.`);
        setGuess('');
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        return; 
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∏–ª—å –Ω–∞–π–¥–µ–Ω –∏ –±—É–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
    setIsAnimating(true);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∏–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω)
    const acceptableNames = targetStyle.aliases || [targetStyle.name.toLowerCase()]; 
    const isWin = acceptableNames.includes(userGuessTextLower);

    let newHints;
    if (isWin) {
      // ‚úÖ –ü–û–ë–ï–î–ê
      newHints = generateHints(targetStyle, targetStyle); 
    } else {
      // ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
      newHints = generateHints(targetStyle, guessedStyle);
    }

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const hintsToSave = newHints.map(hint => {
        const value = guessedStyle[hint.key]; 
        return {
            ...hint,
            value: value, // –ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –∏–≥—Ä–æ–∫
            key: hint.key 
        };
    });


    // 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ø—ã—Ç–∫–∏ —Å —Ñ–ª–∞–≥–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    const attemptToAnimate = { 
        guessText: userGuessText, 
        hints: hintsToSave, 
        isRecognized: true, // –í—Å–µ–≥–¥–∞ true, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—ã—à–ª–∏ –±—ã —Ä–∞–Ω—å—à–µ, –µ—Å–ª–∏ –±—ã —Å—Ç–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        animate: true 
    };

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    setGuessesHistory(prevHistory => [...prevHistory, attemptToAnimate]);

    // 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    const animationDuration = (HINT_KEYS.length * 150) + 1200; 

    setTimeout(() => {
        // ... (–ª–æ–≥–∏–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏, –æ—á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã) ...
        setGuessesHistory(prevHistory => {
            const lastAttempt = prevHistory[prevHistory.length - 1];
            return [
                ...prevHistory.slice(0, -1),
                { ...lastAttempt, animate: false }
            ];
        });
        
        setGuess('');
        setIsAnimating(false);
        
        if (isWin) {
            setGameState('won');
        }
        
    }, animationDuration);
};

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-6 space-y-6">
      <h1 className="text-3xl font-bold mb-4">–£–≥–∞–¥–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å</h1>
      <div className="w-full max-w-md bg-white shadow-lg rounded-xl p-4 space-y-4">
        
        {/* 1. –ü–æ—Ä—è–¥–æ–∫: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (–í–í–ï–†–•–£) */}
        {gameState !== 'playing' && (
          <div className="text-center p-4 border-b">
            {gameState === 'won' ? (
              <p className="text-2xl font-extrabold text-green-600 mb-4">
                üéâ –ü–û–ë–ï–î–ê! –°—Ç–∏–ª—å: {targetStyle.name}
              </p>
            ) : (
              <p className="text-xl font-bold text-red-600 mb-4">
                –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: {targetStyle.name}
              </p>
            )}
            <button 
              onClick={startNewGame} 
              className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700"
            >
              –°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}
        
        {/* 1. –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –û–ë–ï–†–¢–´–í–ê–Æ–©–ò–ô –ë–õ–û–ö –í–û–ö–†–£–ì IMG */}
        <div className="bg-gray-200 rounded-lg overflow-hidden">
        {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–¥–∞–Ω–∏—è */}
        <img 
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á currentPhotoUrl
          src={targetStyle?.currentPhotoUrl} 
          alt="building" 
          className="w-full rounded-lg object-contain h-64" 
        />
        </div>
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ */}
        {gameState === 'playing' && (
          <div className="flex space-x-2">
            <input
              className="border border-gray-300 rounded-lg p-2 flex-1"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å..."
              value={guess}
              onChange={(e) => setGuess(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleGuess();
              }}
              disabled={!targetStyle || isAnimating}
            />
            <button
              onClick={handleGuess}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
              disabled={!guess.trim() || isAnimating}
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
            </button>
          </div>
        )}
        {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded relative text-sm" role="alert">
                {error}
            </div>
        )}
        {/* 2. –ü–æ—Ä—è–¥–æ–∫: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ (–û–ë–†–ê–¢–ù–´–ô –ü–û–†–Ø–î–û–ö) */}
        <div className="space-y-4 pt-4">
          {/* –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ */}
          {[...guessesHistory].reverse().map((attempt, attemptIdx) => (
            <div
              key={guessesHistory.length - 1 - attemptIdx} // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
              className="border p-3 rounded-xl bg-gray-50 shadow-sm"
            >
              {/* –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–∞–∫–∂–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ */}
              <p className="font-semibold mb-2">
                –ü–æ–ø—ã—Ç–∫–∞ #{guessesHistory.length - attemptIdx}: {attempt.guessText}
              </p>
              <div className="grid grid-cols-2 gap-2">
                {attempt.hints.map((hint, hintIdx) => (
                  <div
                  key={hintIdx}
                  // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º [backface-visibility:hidden] - —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –∫–ª–∞—Å—Å
                  className={`rounded-lg p-2 text-center text-xs font-medium ${colorMap[hint.status]}
                      transform transition-all duration-700 ease-in-out [transform-style:preserve-3d] 
                      [backface-visibility:hidden] // <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ö–õ–ê–°–°
                      ${attempt.animate ? 'animate-flip' : 'rotate-x-0'}`}
                  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                  style={{ animationDelay: `${hintIdx * 150}ms` }} 
                  >
                      <div className="text-xs opacity-80">{hint.label}</div>
                      <div className="text-sm">{hint.value}</div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

      </div>
    </div>
  );
}
